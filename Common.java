package szoftProj;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import szoftProj.Game;

public class Common {
	private static Game game;

	public static void main(String[] args) {
		System.out.println("Ez a program teszteli a ZPM-es játékunkat! \n");
		BufferedReader instream = new BufferedReader(new InputStreamReader(System.in));
		while (true) {
			try {
				System.out.println("Mit szeretnél csinálni?");
				System.out.println("A program parancssoros használatához ezt a parancsot add ki: console");
				System.out.println("Ha elõre definiált teszteseteket szeretnél futtatni ezt add ki: test");
				System.out.println("Ha valamelyikbe beléptél és ki szeretnél lépni, akkor ezt add ki : exit");
				System.out.print(">");
				String inputLine = instream.readLine();
				StringTokenizer tokenizer = new StringTokenizer(inputLine, "   ");
				String command = tokenizer.nextToken();

				if ("test".startsWith(command)) {
					System.out.println("A teszt futtatásához a megfelelõ számot add ki parancsként!");
					System.out.println(
							"Ha több tesztesetet szeretnél futtatni, akkor azt így tudod pl megadni: 10-15 (tehát tól-ig)");
					System.out.println("A testesetek listázásához add ki ezt: list");
					while (true) {
						System.out.print(">");
						inputLine = instream.readLine();
						tokenizer = new StringTokenizer(inputLine, "-");
						command = tokenizer.nextToken();
						if ("exit".startsWith(command))
							break;
						if ("list".startsWith(command)) {
							System.out.println("\nA tesztesetek:");
							// itt késõbb nagyon sok teszteset lesz.
							System.out.println("1: Játékos üres mezõre lép");
							System.out.println("2: Játékos nem üres mezõre lép");
							System.out.println("3: Játékos üres és nyitott kapura lép");
							System.out.println("4: Játékos nem üres és nyitott kapura lép");
							System.out.println("5: Játékos zárt kapura lép");
							System.out.println("6: Játékos abyssre lép");
							System.out.println("7: Játékos scale-re lép");
							System.out.println("8: Játékos karakter nem üres (doboz) scalre lép");
							System.out.println("9: Játékos karakter falnak megy");
							System.out.println("10: Játékos karakter portál-falnak megy");
							System.out.println("11: Játékos karakter mûködõ portálnak megy");
							System.out.println("12: Játékos karakter üres és nyitott kapuból lép ki");
							System.out.println("13: Játékos karakter üres és nyitott kapuból lép ki dobozzal elzárt útra");
							System.out.println("14: Játékos fordul egy úton");
							System.out.println("15: Játékos karakter scale-rõl lép le, üres útra");
							System.out.println("16: A játékos karakter dobozt rak egy üres mezõre");
							System.out.println("17: A játékos karakter dobozt rak egy már dobozt tartalmazó mezõre");
							System.out.println("18: A játékos karakter dobozt rak egy üres, nyitott kapura");
							System.out.println("19: A játékos karakter dobozt rak egy nem üres, nyitott kapura");
							System.out.println("20: A játékos karakter dobozt rak egy zárt kapura");
							System.out.println("21: A játékos karakter dobozt vesz fel útról");
							System.out.println("22: A játékos karakter dobozt vesz fel abbysrõl");
							System.out.println("23: A játékos karakter dobozt vesz fel zárt kapuról");
							System.out.println("24: A játékos karakter dobozt vesz fel nyitott portálról");
							System.out.println("25: O’Neill lövedéket indít");
							System.out.println("26: Jaffa lövedéket indít");
							System.out.println("27: Lövedék falba csapódik");
							System.out.println("28: Lövedék portál falba csapódik");
							System.out.println("29: Lövedék becsapódás portál falba, úgy, hogy nyitva van valahol egy portál pár");
							System.out.println("30: Lövedék portálba csapódik");
							System.out.println("31: Lövedék úton halad át");
							System.out.println("32: Lövedék mérlegen halad át");
							System.out.println("33: Lövedék abyssen halad át");
							System.out.println("34: JLövedék nyitott kapun halad át");
							System.out.println("35: Játékos ZPM-re lép");
							System.out.println("36: Játékos ZPM-et vesz fel");
							System.out.println("37: Dobozt rak mérlegre (0 doboz van rajta)");
							System.out.println("38: Dobozt rak mérlegre (1 doboz van rajta)");
							System.out.println("39: Dobozt rak mérlegre (2 doboz van rajta)");
							System.out.println("40: Dobozt rak mérlegre (3 doboz van rajta)");
							System.out.println("41: Dobozt rak abyss-ra");
							System.out.println("42: Dobozt rak falra");
							System.out.println("43: Dobozt rak nyitott portálra");
							System.out.println("44: Dobozt vesz fel nyitott kapuról (kapuban van doboz");
							System.out.println("45: Dobozt vesz fel nyitott kapuról (kapuban nincs doboz)");
							System.out.println("46: Dobozt vesz fel mérlegrõl (nincs rajta doboz)");
							System.out.println("47: Dobozt vesz fel mérlegrõl (1 doboz van rajta)");
							System.out.println("48: Dobozt vesz fel mérlegrõl (3 doboz van rajta)");
							System.out.println("49: Dobozt vesz fel mérlegrõl (4 doboz van rajta)");
							System.out.println("50: Replikátor lép (fal)");
							System.out.println("51: Replikátor lép (scale, van hozzákapcsolt kapu)");
							System.out.println("52: Replikátor lép (lövedékkel találkozik)");
							System.out.println("53: Replikátor lép (O'Neill-el elzárt út)");
							System.out.println("54: Replikátor lép (dobozzal elzárt út)");
							System.out.println("55: Replikátor lép (üres út)");
							System.out.println("56: Replikátor lép (mûködõ portál)");
							System.out.println("57: Replikátor lép (zárt kapu)");
							System.out.println("58: Replikátor lép (abyss)");
							System.out.println("59: O'Neill és Jaffa egymás mellett állnak és lépnek mindketten");
						} else {
							try {
								int testCase = Integer.parseInt(command);
								String lastCaseStr = readString(tokenizer);
								int lastCase = testCase + 1;
								if (lastCaseStr != null)
									lastCase = Integer.parseInt(lastCaseStr) + 1;
								int success = 0;
								int all = 0;
								for (int i = testCase; i < lastCase; i++) {
									all++;
									game = new Game();
									List<String> commands = new ArrayList<String>();
									List<String> expected = new ArrayList<String>();

									File commandFile = null;
									File expectedFile = null;
									switch (i) {
									case 1:
										commandFile = new File("lep.txt");
										expectedFile = new File("lep_elvart.txt");
										break;
									case 2:
										commandFile = new File("lep_nu.txt");
										expectedFile = new File("lep_nu_elvart.txt");
										break;
									case 3:
										commandFile = new File("lep_rg.txt");
										expectedFile = new File("lep_rg_elvart.txt");
										break;
									case 4:
										commandFile = new File("lep_rgb.txt");
										expectedFile = new File("lep_rgb_elvart.txt");
										break;
									case 5:
										commandFile = new File("lep_rgo.txt");
										expectedFile = new File("lep_rgo_elvart.txt");
										break;
									case 6:
										commandFile = new File("lep_ra.txt");
										expectedFile = new File("lep_ra_elvart.txt");
										break;
									case 7:
										commandFile = new File("lep_rs.txt");
										expectedFile = new File("lep_rs_elvart.txt");
										break;
									case 8:
										commandFile = new File("lep_rsb.txt");
										expectedFile = new File("lep_rsb_elvart.txt");
										break;
									case 9:
										commandFile = new File("lep_rw.txt");
										expectedFile = new File("lep_rw_elvart.txt");
										break;
									case 10:
										commandFile = new File("lep_rp.txt");
										expectedFile = new File("lep_rp_elvart.txt");
										break;
									case 11:
										commandFile = new File("lep_rpo.txt");
										expectedFile = new File("lep_rpo_elvart.txt");
										break;
									case 12:
										commandFile = new File("lep_gr.txt");
										expectedFile = new File("lep_gr_elvart.txt");
										break;
									case 13:
										commandFile = new File("lep_grb.txt");
										expectedFile = new File("lep_grb_elvart.txt");
										break;
									case 14:
										commandFile = new File("fordul_r.txt");
										expectedFile = new File("fordul_r_elvart.txt");
									case 15:
										commandFile = new File("lep_sr.txt");
										expectedFile = new File("lep_sr_elvart.txt");
										break;
									case 16:
										commandFile = new File("drop_rr.txt");
										expectedFile = new File("drop_rr_elvart.txt");
										break;
									case 17:
										commandFile = new File("drop_rrb.txt");
										expectedFile = new File("drop_rrb_elvart.txt");
										break;
									case 18:
										commandFile = new File("drop_rg.txt");
										expectedFile = new File("drop_rg_elvart.txt");
										break;
									case 19:
										commandFile = new File("drop_rgb.txt");
										expectedFile = new File("drop_rgb_elvart.txt");
										break;
									case 20:
										commandFile = new File("drop_rgc.txt");
										expectedFile = new File("drop_rgc_elvart.txt");
										break;
									case 21:
										commandFile = new File("dobozfel.txt");
										expectedFile = new File("dobozfel_elvart.txt");
										break;
									case 22:
										commandFile = new File("dobozfel_abbys.txt");
										expectedFile = new File("dobozfel_abbys_elvart.txt");
										break;
									case 23:
										commandFile = new File("dobozfel_kapu.txt");
										expectedFile = new File("dobozfel_kapu_elvart.txt");
										break;
									case 24:
										commandFile = new File("dobozfel_portal.txt");
										expectedFile = new File("dobozfel_portal_elvart.txt");
										break;
									case 25:
										commandFile = new File("loves_oneill.txt");
										expectedFile = new File("loves_oneill_elvart.txt");
										break;
									case 26:
										commandFile = new File("loves_jaffa.txt");
										expectedFile = new File("loves_jaffa_elvart.txt");
										break;
									case 27:
										commandFile = new File("loves_falba.txt");
										expectedFile = new File("loves_falba_elvart.txt");
										break;
									case 28:
										commandFile = new File("loves_pfalba.txt");
										expectedFile = new File("loves_pfalba_elvart.txt");
										break;
									case 29:
										commandFile = new File("loves_pfalba2.txt");
										expectedFile = new File("loves_pfalba2_elvart.txt");
										break;
									case 31:
										commandFile = new File("bullet_uton.txt");
										expectedFile = new File("bullet_uton_elvart.txt");
										break;
									case 32:
										commandFile = new File("bullet_uton.txt");
										expectedFile = new File("bullet_uton_elvart.txt");
										break;
									case 33:
										commandFile = new File("bullet_abyss.txt");
										expectedFile = new File("bullet_abyss_elvart.txt");
										break;
									case 34:
								          commandFile = new File("bullet_ajto.txt");
								          expectedFile = new File("bullet_ajto_elvart.txt");
								          break;
									case 35:
										commandFile = new File("player_zpm_move.txt");
										expectedFile = new File("player_zpm_move_elvart.txt");
										break;
									case 36:
										commandFile = new File("player_zpm_grab.txt");
										expectedFile = new File("player_zpm_grab_elvart.txt");
										break;
									case 37:
										commandFile = new File("drop_rs0.txt");
										expectedFile = new File("drop_rs0_elvart.txt");
										break;
									case 38:
										commandFile = new File("drop_rs1.txt");
										expectedFile = new File("drop_rs1_elvart.txt");
										break;
									case 39:
										commandFile = new File("drop_rs2.txt");
										expectedFile = new File("drop_rs2_elvart.txt");
										break;
									case 40:
										commandFile = new File("drop_rs3.txt");
										expectedFile = new File("drop_rs3_elvart.txt");
										break;	
									case 41:
										commandFile = new File("drop_ra.txt");
										expectedFile = new File("drop_ra_elvart.txt");
										break;	
									case 42:
										commandFile = new File("drop_rw.txt");
										expectedFile = new File("drop_rw_elvart.txt");
										break;	
									case 43:
										commandFile = new File("drop_rpo.txt");
										expectedFile = new File("drop_rpo_elvart.txt");
										break;	
									case 44:
										commandFile = new File("grab_rg.txt");
										expectedFile = new File("grab_rg_elvart.txt");
										break;
									case 45:
										commandFile = new File("grab_rgb.txt");
										expectedFile = new File("grab_rgb_elvart.txt");
										break;
									case 46:
										commandFile = new File("grab_rs.txt");
										expectedFile = new File("grab_rs_elvart.txt");
										break;
									case 47:
										commandFile = new File("grab_rs2.txt");
										expectedFile = new File("grab_rs2_elvart.txt");
										break;
									case 48:
										commandFile = new File("grab_rs3.txt");
										expectedFile = new File("grab_rs3_elvart.txt");
										break;
									case 49:
										commandFile = new File("grab_rs4.txt");
										expectedFile = new File("grab_rs4_elvart.txt");
										break;
									case 50:
										commandFile = new File("replicator_lep_rw.txt");
										expectedFile = new File("replicator_lep_rw_elvart.txt");
										break;
									case 51:
										commandFile = new File("replicator_lep_rsrg.txt");
										expectedFile = new File("replicator_lep_rsrg_elvart.txt");
										break;
									case 52:
										commandFile = new File("replicator_lep_rrrbu.txt");
										expectedFile = new File("replicator_lep_rrrbu_elvart.txt");
										break;
									case 53:
										commandFile = new File("replicator_lep_rro.txt");
										expectedFile = new File("replicator_lep_rro_elvart.txt");
										break;
									case 54:
										commandFile = new File("replicator_lep_rrb.txt");
										expectedFile = new File("replicator_lep_rrb_elvart.txt");
										break;
									case 55:
										commandFile = new File("replicator_lep_rr.txt");
										expectedFile = new File("replicator_lep_rr_elvart.txt");
										break;
									case 56:
										commandFile = new File("replicator_lep_rpp.txt");
										expectedFile = new File("replicator_lep_rpp_elvart.txt");
										break;
									case 57:
										commandFile = new File("replicator_lep_rg.txt");
										expectedFile = new File("replicator_lep_rg_elvart.txt");
										break;
									case 58:
										commandFile = new File("replicator_lep_ra.txt");
										expectedFile = new File("replicator_lep_ra_elvart.txt");
										break;
									case 59:
										commandFile = new File("units.txt");
										expectedFile = new File("units_elvart.txt");
										break;
									default:
										System.out.println("Nincs ilyen teszteset!");
										continue;
									// break;
									}
									commands = loadFromFile(commandFile);
									expected = loadFromFile(expectedFile);

									List<String> result = new ArrayList<String>();

									StringBuilder inputText = new StringBuilder();
									StringBuilder expectedText = new StringBuilder();
									for (String comm : commands) {
										inputText.append(comm + "\n");
									}
									for (String expect : expected) {
										expectedText.append(expect + "\n");
									}
									System.out.println(inputText.toString());
									if(runCommand(inputText.toString(), expectedText.toString(), game))
										success++;
									System.out.println("\n tesztek száma: " + all + " ebbõl ennyi volt sikeres: " + success );
								}
							} catch (Exception ex) {
								ex.printStackTrace();
								throw new Exception("Nem számot adtál meg vagy valami baj van.");
							}
						}
					}
				} else if ("console".startsWith(command)) {
					game = new Game();

					while (true) {
						System.out.println("parancsok listázásához írd be ezt: list");
						System.out.println("játék parancs kiadásához írd be ezt: start");
						System.out.print(">");
						inputLine = instream.readLine();

						if ("exit".startsWith(inputLine))
							break;
						else
						// TODO ,ezt lécci valaki szedje majd össze
						if ("list".startsWith(inputLine)) {
							System.out.println("newGame : új játék kezdése az alapértelmezett pályán");
							System.out.println("newGame pálya.xml : új játék kezdése pálya.xml pályán");
							System.out.println("update : frissíti a játék állapotát");
							System.out.println("update pause|resume : automatikus frissítés ki-be (egyenlõre nincs használatban)");
							System.out.println("loadGame : játék betöltése (egyenlõre nincs használatban)");
							System.out.println("saveGame : játék mentése  (egyenlõre nincs használatban)");
							System.out.println("exitGame : kilépés a játékból mentés nélkül");
							System.out.println("move oneill|jaffa|replicator : O'neill vagy Jaffa vagy Replikátor karaktere lép egyet");
							System.out.println("turn oneill|jaffa|replicator north|west|east|south : egység fordul adott irányba");
							System.out.println("grab oneill|jaffa : egység megpróbál felvenni valamit az elõtte lévõ mezõrõl");
							System.out.println("drop oneill|jaffa : egység megpróbál lerakni valamit az elõtte lévõ mezõre");
							System.out.println("shoot oneill|jaffa blue|yellow|red|green : egység lõ adott színû lövedéket");
							System.out.println("getUnit oneill|jaffa|replicator : adott egység teljes állapotának kiírása");
							System.out.println("getZPM oneill|jaffa : adott egységnél lévõ ZPM kiírása");
							System.out.println("getField x y : (x,y) koordinátákon lévõ mezõ állapotának kiírása");
							System.out.println("getPortal : portal objektum állapotának kiírása");
							System.out.println("listBoxes : összes doboz kiírása");
							System.out.println("listZPMs : összes ZPM kiírása");
							System.out.println("setReplicatorDir north|west|east|south : replikátor statikus irányának megadása");
							System.out.println("setUnitPos oneill|jaffa|replicator x y : adott egység áthelyezése (x,y) koordinátájú mezõre");
							System.out.println("setUnitPos ox oy tx ty : (ox,oy) koordinátán lévõ összes egység áthelyezése (x,y) koordinátájú mezõre");
							System.out.println("killUnit oneill|jaffa|replicator : adott egység elpusztítása");
							System.out.println("killUnit x y : (x,y) koordinátán lévõ összes egység elpusztítása");
							System.out.println("addBox : új doboz lerakása random üres útra");
							System.out.println("addZPM : új ZPM lerakása random üres útra");
							System.out.println("addReplicator : új replikátor lerakása random üres útra");
							System.out.println("talkativeStage on|off : az állapot kiírás ki-be kapcsolása (alapból bekapcsolva)");
						} else {
							game.console();
							System.out.println("Hibás parancs miatt vagy egyéb okból kiléptél (starttal kezdd újra)");
						}
					}
				} else {
					throw new Exception("Hibas parancs! (" + inputLine + ")");
				}
			} catch (Exception e) {
				System.out.println("? " + e.toString());
			}
		}
	}

	static String readString(StringTokenizer tokenizer) throws Exception {
		if (tokenizer.hasMoreElements()) {
			return tokenizer.nextToken();
		} else {
			return null;
		}
	}

	static List<String> loadFromFile(File file) {
		List<String> strList = new ArrayList<String>();
		try {
			BufferedReader br = new BufferedReader(new FileReader(file));
			try {
				StringBuilder sb = new StringBuilder();
				String line = br.readLine();

				while (line != null) {
					strList.add(line);
					line = br.readLine();
				}
				return strList;
			} finally {
				br.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	static boolean runCommand(String inputText, String expectedOutputText, Game game) throws Exception {

		ByteArrayInputStream bais = new ByteArrayInputStream(inputText.getBytes());
		ByteArrayOutputStream baos = new ByteArrayOutputStream();

		InputStream originalInput = System.in;
		PrintStream originalOutput = System.out;

		System.setIn(bais);
		System.setOut(new PrintStream(baos));

		game.console();

		System.setIn(originalInput);
		System.setOut(originalOutput);

		String outputText = baos.toString();
		System.out.println(outputText);

		String[] outputTextArray = outputText.split("\n");

		if (expectedOutputText != null) {
			boolean equals = true;
			String[] expectedOutputTextArray = expectedOutputText.split("\n");
			System.out.println("\n");
			System.out.println("az elvárt kimenet: \n");
			for (String str : expectedOutputTextArray) {
				System.out.println(str);
			}
			for (int i = 0; i < expectedOutputTextArray.length; i++) {
				// enterek, tabulátorok kiszûrése
				if (expectedOutputTextArray[i].length() <= 1)
					break;
				if (i < outputTextArray.length) {
					if (!outputTextArray[i].equals(expectedOutputTextArray[i] + "\r")) {
						System.out.println();
						System.out.println("A különbözõ sorok:");
						System.out.println(outputTextArray[i]);
						System.out.println(expectedOutputTextArray[i]);
						equals = false;
					}
				} else
					equals = false;
			}
			if (equals){
				System.out.println("\n A teszt sikeres");
				return true;
			}
			else{
				System.out.println("\n A teszt sikertelen");
				return false;
			}
			
		}
		return false;

	}

}
